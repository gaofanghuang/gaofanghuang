{"id":"1515239514230","title":"【Webpack + Vue全家桶开发】（三）环境配置\n","summary":"自动根据环境切换api....\n","tags":["Vue","Axios","HTTP库","Webpack","入门","扫盲","基础"],"content":"# 【Webpack + Vue全家桶开发】（三）环境配置\n\n## 自动切换本地/线上api\n\n> 自动根据环境切换api....\n\n一般来说，本地开发时使用的api接口和线上生产环境使用的api接口是不同的，因此可以通过webpack中的配置来实现自动切换。\n\nconfig -> dev.env.js、prod.env.js\n\n![](http://oh8nyy0e4.bkt.clouddn.com/18-6-6/34717736.jpg)\n\n配置之后，当我们执行 npm run dev / npm run build 命令时， api接口就会自动切换了。\n\n## axios的二次封装\n\n![](http://oh8nyy0e4.bkt.clouddn.com/18-6-6/26622729.jpg)\n\n@/api/index.js\n\n在这个文件还可以增加toast/message等组件用来显示报错/成功等状态消息，如果是开发后台管理项目，直接在这里配置会更方便，前台项目则由于需要更多的灵活性，直接在页面中选择是否调用toast/message。\n\n```javascript\nimport store from '@/store'\nimport axios from 'axios'\nimport _config from './config'\nimport * as types from './types'\n\n// 封装\nconst fetch = function (api, params, config) {\n  // 默认开启成功/错误提示\n  return new Promise((resolve, reject) => {\n    let _url = types[api] + '?token=' + store.state.token\n    let axconfig = ''\n    if (config) {\n      axconfig = config\n    } else {\n      axconfig = _config\n    }\n    axios.post(_url, params, axconfig)\n      .then(response => {\n        let res = response.data\n        if (res.status === '999') {\n          store.dispatch('SAVE_TOKEN', res.data.token)\n          if (res.user_info) {\n            store.dispatch('SAVE_USER', res.data.user_info)\n          }\n          fetch(api, params, config).then(res => {\n            resolve(res)\n          })\n        } else {\n          resolve(res)\n        }\n      }, err => {\n        console.log('AJAX错误: API接口' + _url + '报错回调：' + err)\n      })\n      .catch((error) => {\n        console.log('网络错误:' + error)\n      })\n  })\n}\nexport default fetch\n```\n\n@/api/config.js\n\n```javascript\nimport Qs from 'qs'\n\nexport default {\n  url: '',\n  baseURL: process.env.API_ROOT,\n  method: 'POST',\n  transformRequest: [\n    function (data) {\n      data = Qs.stringify(data)\n      return data\n    }\n  ],\n  transformResponse: [\n    function (data) {\n      return data\n    }\n  ],\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'platform': 'webapp'\n  },\n  paramsSerializer: function (params) {\n    return Qs.stringify(params)\n  },\n  timeout: 10000,\n  withCredentials: false, // default\n  responseType: 'json', // default\n  maxContentLength: 2000,\n  validateStatus: function (status) {\n    return status >= 200 && status < 300 // default\n  },\n  maxRedirects: 5 // default\n}\n\n```\n\n@/api/type.js\n\n```javascript\nexport const DO_LOGIN = '/api/Common/login' // 提交-登录\nexport const DO_REGISTER = '/api/Common/register' // 提交-注册\nexport const DO_LOGOUT = '/api/Common/logout' // 提交-注销\nexport const GET_HOME = '/api/Index/app_index' // 获取-首页数据\n```\n\ntype.js这个文件这里用来定义每个API接口的路径，对于比较小型的项目来说可以不使用，但是在大型项目下使用可以避免很多重复性的工作。比如说当后端修改api接口时，只需要修改type.js这个文件就行。\n\n## 把axios绑定到Vue\n\n如果项目里调用数据的页面不多，可以直接在需要用到的页面import，通常我们为了方便调用是直接绑定到全局去。\n\n@/main.js\n\n![](http://oh8nyy0e4.bkt.clouddn.com/18-6-6/30478212.jpg)\n\n## 在Vue中获取数据\n\n```javascript\nexport default {\n  beforeMount () {\n    // 在这个状态下调取数据\n    this.getData()\n  },\n  methods: {\n    getData () {\n      this.$fetch('GET_HOME').then(res => {\n        console.log(res)\n      })\n        .catch(error => {\n          console.log(error)\n        })\n    }\n  }\n}\n```\n\n\n\n","lasttime":1546913540570}