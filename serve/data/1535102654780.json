{"id":"1535102654780","title":"常用的数组/对象操作方法","tags":["数组","Array","方法","代码片段","数据","对象","Object"],"content":"## 数组操作方法\n\n1. 设置数组的长度\n\n  *length*\n\n  ```javascript\n    let abc = [1, 2, 3, 4, 5, 6, 7]\n    console.log(abc)\n    // (7) [1, 2, 3, 4, 5, 6, 7]\n    abc.length = 3\n    console.log(abc)\n    // (3) [1, 2, 3]\n  ```\n\n2. 在数组末尾加一个/多个元素\n\n  *push*\n\n  ```javascript\n    // 在数组末尾加一个元素\n    let myPet = ['萝卜', '荔枝', '来福']\n    myPet.push('旺财')\n    console.log(myPet, myPet.length)\n    // (4) [\"萝卜\", \"荔枝\", \"来福\", \"旺财\"] 4\n\n    // 在数组末尾加多个元素\n    let myPet2 = ['萝卜', '荔枝', '来福']\n    myPet2.push('旺财', '花花')\n    console.log(myPet2, myPet2.length)\n   // (5) [\"萝卜\", \"荔枝\", \"来福\", \"旺财\", \"花花\"] 5\n  ```\n\n3. 在数组末尾删除一个元素,并返回这个被删除元素\n\n  *pop*\n\n  ```javascript\n    let week = ['周一', '周二', '周三']\n    let week2 = week.pop()\n    console.log(week, week2)\n    // (2) [\"周一\", \"周二\"] \"周三\"\n  ```\n\n4. 在数组头部加一个/多个元素\n\n  *unshift*\n\n  ```javascript\n    // 在数组开头加一个元素\n    let myPet3 = ['萝卜', '荔枝', '来福']\n    myPet3.unshift('旺财')\n    console.log(myPet3, myPet3.length)\n    // (4) [\"旺财\", \"萝卜\", \"荔枝\", \"来福\"] 4\n\n    // 在数组开头加多个元素\n    let myPet4 = ['萝卜', '荔枝', '来福']\n    myPet4.unshift('旺财', '花花')\n    console.log(myPet4, myPet4.length)\n    // (5) [\"旺财\", \"花花\", \"萝卜\", \"荔枝\", \"来福\"] 5\n  ```\n\n5. 在数组头部删除一个元素，并返回这个被删除元素\n\n  *shift*\n\n  ```javascript\n    let week = ['周一', '周二', '周三']\n    let week2 = week.shift()\n    console.log(week, week2)\n    (2) [\"周二\", \"周三\"] \"周一\"\n  ```\n\n6. 删除数组任意位置且任意数量的元素\n\n  *splice*\n\n  arr.splice(index, n), 从第index个元素开始，删除n个元素，并返回这个被删除元素\n\n  ```\n    let list = ['a', 'b', 'c', 'd', 'e']\n    let _list = list.splice(2, 1) \n    let list2 = ['a', 'b', 'c', 'd', 'e']\n    let _list2 = list2.splice(0, 1) \n    console.log(list, _list, list2, _list2)\n    // (4) [\"a\", \"b\", \"d\", \"e\"] [\"c\"] (4) [\"b\", \"c\", \"d\", \"e\"] [\"a\"]\n  ```\n  \n7. 检查数组是否包含指定的值\n\n  *includes*\n\n  ```\n  let rule = ['abc', 'edf']\n  arr.includes(rule)\n  ```\n\n8. 将数组用value连接为字符串(不改变原数组)\n\n  *join*\n\n  ```\n  let a = [1, 2, 3, 4, 5]\n  let res = a.join(',')\n  console.log(res)   // '1,2,3,4,5'\n  console.log(a)        // [1, 2, 3, 4, 5]\n  ```\n\n9. 反转数组(改变原数组)\n\n  *reverse*\n\n  ```\n  let a = [1, 2, 3, 4, 5]\n  let res = a.reverse()\n  console.log(res)   // [5, 4, 3, 2, 1]\n  console.log(a)        // [5, 4, 3, 2, 1]\n  ```\n  \n10. 截取指定位置的数组（）(不改变原数组)\n\n  *slice(start, end)*\n\n  ```\n  // Base\n  let a = [1, 2, 3, 4, 5]\n  let result = a.slice(2, 4)\n  console.log(result)   // [3, 4]\n  console.log(a)        // [1, 2, 3, 4, 5]\n\n  // More\n  console.log(a.slice(1))         // [2, 3, 4, 5]   只有一个参数且不小于0，则从此索引开始截取到数组的末位\n  console.log(a.slice(-1))        // [5]            只有一个参数且小于0，则从倒数|start|位截取到数组的末位\n  console.log(a.slice(-1, 1))     // []             反向截取，不合法返回空数组\n  console.log(a.slice(1, -1))     // [2, 3, 4]      从第一位截取到倒数第一位，不包含倒数第一位\n  console.log(a.slice(-1, -2))    // []             反向截取，不合法返回空数组\n  console.log(a.slice(-2, -1))    // [4]            倒数第二位截取到倒数第一位\n  ```\n\n11. 对数组元素进行排序(改变原数组)\n\n  *sort*\n\n  ```\n  let a = [31, 22, 27, 1, 9]\n  let result = a.sort()\n  console.log(result)   // [1, 22, 27, 31, 9]\n  console.log(a)        // [1, 22, 27, 31, 9]\n  ```\n\n12. 将数组中的元素用逗号拼接成字符串(不改变原数组)\n\n  *toString*\n\n  ```\n  // Base\n  let a = [1, 2, 3, 4, 5]\n  let result = a.toString()\n  console.log(result)   // 1,2,3,4,5\n  console.log(a)        // [1, 2, 3, 4, 5]\n  ```\n\n13. 从索引为0开始，检查数组是否包含value，有则返回匹配到的第一个索引，没有返回-1(不改变原数组)\n\n  *indexOf*\n\n  ```\n  let a = [1, 2, 3, 2, 5]\n  let result = a.indexOf(2)\n  console.log(result)   // 1\n  console.log(a)        // [1, 2, 3, 2, 5]\n  ```\n\n14. 从最后的索引开始，检查数组是否包含value，有则返回匹配到的第一个索引，没有返回-1(不改变原数组)\n\n  *lastIndexOf*\n\n  ```\n  let a = [1, 2, 3, 2, 5]\n  let result = a.lastIndexOf(2)\n  console.log(result)   // 3\n  console.log(a)        // [1, 2, 3, 2, 5]\n  ```\n\n15. 将数组和/或值连接成新数组(不改变原数组)\n\n  *concat*\n\n  ```\n  // Base\n  let a = [1, 2], b = [3, 4], c = 5\n  let result = a.concat(b, c)\n  console.log(result)   // [1, 2, 3, 4, 5]\n  console.log(a)        // [1, 2]\n\n  // More\n  b = [3, [4]]\n  result = a.concat(b, c)\n  console.log(result)   // [1, 2, 3, [4], 5] concat对于嵌套数组无法拉平\n  console.log(a)        // [1, 2]\n  ```\n\n> 扩展阅读：\n\n[MDN Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)","lasttime":1546852949599}