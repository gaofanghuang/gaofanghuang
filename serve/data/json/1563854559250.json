[{"type":2,"title":"","content":"搬运 from 2017-06-03\n\n-------\n\n# 个人静态博客开发小结v1.0\n\n之前用过**hexo**,**wordpress**之类的博客，可以开箱即用，写博客也很方便。\n\nwordpress功能很全，但是需要购买服务器，而且用久了会有点卡，对于我来说代码量有些臃肿。hexo是静态博客，可以生产静态html，不需要服务器直接push到github，改了几个主题之后，还是觉得有些局限，而且直接用编辑器写mk文件还是觉得不够方便。\n\n这两个博客程序都不太符合自己的需求，所以一直想着从设计到前后端，自己动手实现一个静态博客程序。\n\n最近刚好有时间，就自己琢磨着写了一个，还不是很完善，但是目前来说足够我用了。\n\n需求是：\n\n1. 可以直接打开浏览器写文章，而不需要打开编辑器；\n2. 能够用markdown语法；\n3. 以标签为导向而不是时间，能为每篇文章输入不同的标签，模糊写文章的具体时间，以缓解更新的压力，每篇文章首次提交之后可以反复编辑，只保留最后一次更新的日期作为参考；\n4. 数据和界面分离，能够很方便修改主题；\n5. 编辑文章的界面要有一个搜索功能，可以根据标签搜索到匹配的文章列表。\n6. 简单，易上手，开箱即用。\n\n----\n\n## 1.0 版本界面截图：\n\n后台编辑界面：\n\n\n\n前台博客界面：\n\n\n\n后台界面在本地运行，所以无法提供预览。\n\n前台博客界面访问：\nhttp://blog.huanggaofang.com 即可查看。\n\n## 关于后台开发\n\n#### 使用技术 \n\nNode.js、Express、LowDB、CORS\n\n#### 遇到的坑\n\n1. 跨域：\n\n  在前端访问后端ajax接口时会报错：\n\n  ```javascript\n  XMLHttpRequest cannot load http://192.168.1.159:9000/getList. \nOrigin http://192.168.1.159 is not allowed by Access-Control-Allow-Origin.\n  ```\n\n  尝试了以下方法，但并不成功：\n\n  ```javascript\n  app.all('*', function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n    res.header(\"Access-Control-Allow-Methods\",\"PUT,POST,GET,DELETE,OPTIONS\");\n    res.header(\"X-Powered-By\",' 3.2.1')\n    res.header(\"Content-Type\", \"application/json;charset=utf-8\");\n    next();\n  });\n  ```\n\n  解决办法，引入[CORS ](https://github.com/expressjs/cors)\n\n  ```javascript\n  /*app.js*/\n  let cors = require('cors') //设置允许跨域访问\n  //查询列表\n  app.post('/getList', cors(), function (req, res) {\n    let alldata = ''\n    req.on('data', function (chunk) {\n      alldata += chunk\n    });\n    req.on('end', function () {\n      let dataString = alldata.toString()\n      let dataObj = querystring.parse(dataString) //前端请求的参数\n      res.json({\n        status: '1',\n        msg: 'Success!'\n      });\n    });\n  });\n```\n\n  这样就可以跨域访问接口了。\n\n2. 数据库\n\n  因为前端调数据时我希望能使用JSON格式，所以一开始方向就是Node.js读写数据。\n\n  刚开始用以下写法：\n\n  ```javascript\n  //创建JSON文件\n  var fs=require('fs');\n  fs.writeFileSync('./output.json',JSON.stringify({a:1,b:2}));\n  ```\n\n  并且最初的想法是一个list.json文件写入所有的文章列表，然后具体文章放到子文件夹里，按写入日期分割成每个独立的小文件，以减少体积。\n\n  后来发现完全没有必要做，反而违背了我希望能简洁使用的原则。\n\n  于是使用了 [LowDB](https://github.com/typicode/lowdb)\n\n  配置：\n\n  ```javascript\n  /*app.js*/\n  const low = require('lowdb')\n  const FileSync = require('lowdb/adapters/FileSync')\n  const adapter = new FileSync('./data/list.json')\n  const db = low(adapter)\n  db.defaults({\n    list: []\n   }).write()\n  let list = db.get('list')\n  ```\n\n  其中**db.defaults()**这一步很重要，如果不写，读取数据就不会成功\n\n  生成的JSON文件是这样的\n\n  ```javascript\n  /*list.json*/\n  {\n    \"list\": [\n      {\n        \"id\": \"1515239514230\",\n        \"title\": \"Axios + Vue 的简单配置\",\n        \"tags\": \"Axios,Vue,HTTP库\",\n        \"lasttime\": \"1516196835501\",\n        \"content\": \"111\"\n      },\n      {\n        \"id\": \"1515849780154\",\n        \"title\": \"个人静态博客开发小结\",\n        \"tags\": \"Vue,Node,Express,LowDB,Axios,Markdown,博客,总结\",\n        \"lasttime\": \"1516283226745\",\n        \"content\": \"222\"\n      }\n    ]\n  }\n  ```\n\n## 关于前台开发\n\n#### 遇到的坑\n\n在编辑界面传tags时， 后端接收到的格式会发生变化，\n\n```javascript\n//发送的格式\nlet data = {\ntags: [1, 2, 3]\n}\n//收到的格式\nlet data = {\ntags[0]: 1,\ntags[1]: 2,\ntags[3]: 3,\n}\n```\n#### 解决方法\n\n把tags转成字符串再发送 `Array.join(\",\")`\n\n#### 猜测\n\n由于后端收到代码时进行了转码导致`toString()`，待证实，等下次改版再优化了，目前暂时这样。\n\n## 使用Ctrl+S保存\n\n```javascript\n  mounted() {\n    let self = this;\n    window.addEventListener(\"keydown\", function(e) {\n        //可以判断是不是mac，如果是mac,ctrl变为花键\n        //event.preventDefault() 方法阻止元素发生默认的行为。\n        if (e.keyCode == 83 && (navigator.platform.match(\"Mac\") ? e.metaKey : e.ctrlKey)) {\n            e.preventDefault();\n            // Process event...\n            self.saveItem();\n        }\n    }, false);\n  },\n```\n\n## 下个版本待优化事项：\n\n1. 目前需要开启3个命令运行，下个版本需要优化成开启1个命令即可运行\n\n2. list.json文件和前端界面实现分离，list.json修改，而不需要重新编译blog (已完成)\n\n3. edit 和 blog 抽取部分重复css，实现复用。","imgs":[],"img":"","video":"","version":"1.0.0","todo":[],"lasttime":1563955661991,"pid":"1563854559250","id":1563954707393},{"type":2,"title":"","content":"搬运 from 2018-07-01\n\n-----\n\n# 个人博客2.0改版记录\n\n## 20180824 2.1界面更新\n修改了首页的排版和分页按钮交互方式。\n\n图：\n\n\n\n展开个人简介的效果\n\n\n\n移动端： \n\n增加了左右滑动的手势触发上下页。\n\n\n\n\n## 1.0与2.0\n\n1.0 是利用零碎的业余时间断断续续开发出来的，2.0改版这次的时间更充裕一些，从构思到设计并实现，前后大概连续用了一周时间。因为是个人博客，所以不希望阅读体验上太过商业化，因此在浏览舒适的前提下更多的偏向于个人的喜好，采用了一些非常规的视觉与交互方式。\n\n视觉方面继承了1.0的配色和排版风格，细节地方则进行了大量的优化提升。并且增加了移动端适配。\n\n代码方面较1.0版本逻辑更清晰，代码复用率更高，在仍然是前后端分离的情况下，开两个node进程即可完成从开发到编译的所有需求，合并了1.0版本的eidt编辑功能。\n\n初步尝试了PWA技术，添加到主屏后，即使断网也能访问了。\n\n\n\n## 2.0需求：\n\n1. blog 首页增加键盘方向键控制, 按左键显示上一篇文章，按右键显示下一篇文章。(完成)\n\n2. 文章列表页和文章详情页改为宽屏模式，文章详情页增加文章内小标题目录模块。（完成）\n\n3. 文章列表页的文章显示顺序为，最新修改/增加的排在最前面。（完成）\n\n4. 优化移动端和pad端的自适应显示效果。（完成）\n\n5. 解决调用的网易云音乐无法播放的问题。（忽略，因版权问题，目前网易云音乐已禁止调用外链）\n\n6. lowDB数据库，从一个文件拆分为多个文件，list.json 和 articel-$id.json，list.json只存储文章标题、标签、id等数据，article-$id.json文件存储文章的具体数据，其中*为文章的创建时间戳（id）。（完成）\n\n7. 编辑功能不再单独做一个SPA，并且只在开发模式才能访问。（完成）\n\n\n\n## 2.0界面视觉改版\n\n#### 首页\n\npc端\n\n\n\n移动端\n\n\n\n\n#### 文章列表页\n\npc端\n\n\n\n移动端\n\n\n\n#### 文章详情页\n\npc端\n\n\n\n移动端\n\n\n\n#### 文章编辑\n\n\n\n\n## 交互设计\n\n交互方面设计了一些小细节增加界面的趣味性：\n\n1. 不断掉落的透明小方块： 这个其实在1.0就是已经完成的，但1.0的版本那些小方块是写死的样式，并不会随机变化，2.0版本则增加了随机效果，即每次编译的小方块都会是不一样的。\n\n  使用sass的随机变量构成：\n\n  ```scss\n  .snow-down {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 1;\n    i {\n      position: absolute;\n      top: -5vh;\n      left: 0;\n      width: 1rem;\n      height: 1rem;\n      content: \"\";\n      background: $white;\n      animation: downSnow 18s;\n      animation-iteration-count: infinite;\n      opacity: 0.2;\n    }\n    @for $i from 1 through 12 {\n      $randomWidth: random()#{rem};\n      $randomTime: round(random() * 10+4);\n      i:nth-of-type(#{$i}) {\n        width: $randomWidth;\n        height: $randomWidth;\n        left: round(random()*100)#{vw};\n        top: round(random()*-100)#{vh};\n        animation: downSnow $randomTime#{s};\n        animation-iteration-count: infinite;\n        opacity: 0.2;\n      }\n    }\n  }\n  @keyframes downSnow {\n    from {\n      top: 0;\n      transform: rotate(0deg);\n    }\n    to {\n      top: 100vh;\n      transform: rotate(360deg);\n    }\n  }\n  ```\n\n2. 个人联系方式，2.0版本增加了联系邮箱，左下角的`□ `按钮，移动端从顶部往下滑都触发联系方式的出现。\n\n3. 更细更优雅的滚动条， 减少非滚动时的视觉干扰。\n\n  ```scss\n  @mixin scroll-bar($color) {\n    &::-webkit-scrollbar {\n      width: px2rem(8);\n      height: px2rem(8);\n    }\n    &::-webkit-scrollbar-thumb {\n      background-color: rgba($color: $color, $alpha: 0.2);\n      transition: 0.2s;\n      border-radius: px2rem(8);\n    }\n    &::-webkit-scrollbar-track {\n      background-color: $alpha;\n    }\n    &:hover::-webkit-scrollbar-thumb {\n      background-color: rgba($color: $color, $alpha: 0.6);\n    }\n  }\n  ```\n\n4. 首页增加了方向键控制文章的切换，保留了按上下键控制滚动条的交互，按左键则加载上一篇文章，按右键则加载下一篇文章，点击标题右上角的`〇`按钮还可以跳转到这篇文章的文章详情页。\n\n5. 文章详情页增加了文章内目录，方面在查看长文时能快速浏览到内容概要，并滑动到相应位置。\n\n6. ahchive文章列表页，集齐了搜索，标签，时间指示等功能。搜索是根据文章标题和文章标签来搜索的，不区分大小写。时间指示器，显示了过去7天的更新频率，过去7天中的哪天更新了，对应的小点变回亮起，并且点击亮起的小点可以跳转到该文章。\n\n \n\n## 服务端修改\n\n相比前端界面的大量改版，服务端这次只用了10分钟就改完了。\n\n对于【后端就是增删查改】这句话有了更深刻的认知，也许3.0版本可以考虑使用一些后端云服务了。\n\n总的来说，对这次的改版还是比较满意，3.0就等明年再说了。","imgs":[],"img":"","video":"","version":"2.0.0","todo":[],"lasttime":1563955856783,"pid":"1563854559250","id":1563955827414},{"type":2,"title":"","content":"搬运 from 2019-01-12\n\n-----\n\n# Blog3.0改版记录\n\n> 新年新版本！\n\n这次使用了koa2重构后端程序，并且增加了本地上传图片的功能。\n\n😱之前用七牛外链的图片全部挂了，还是本地存图保险一些。那些挂掉的图片，改起来工作量太大了，等有空再慢慢想办法找回吧😓。\n\n---\n\n3.0 需求：\n\n1. 本地存图，不在使用第三方图床了 √\n\n2. 进一步整合编辑与查看功能 √\n\n3. 把主仓库与Blog仓库合并 √\n\n4. 更精简的代码 √\n\n5. 重新设计一套统一的图标\n\n6. Markdown解析样式优化\n\n7. 自动保存编辑框的内容到本地\n\n8. 点击图片查看大图 √\n\n9. 传图支持直接粘贴 √\n\n10. 文章列表增加封面图 √\n\n11. 编辑框增加常用emoji表情\n\n--- \n\n## 改版说明\n\n### 旧版截图\n\n![1563956363722](http://localhost:9000/img/1563956363722.png)\n\n![1563956363782](http://localhost:9000/img/1563956363782.png)\n\n因为图床挂了，找不到更多以前的截图了。大概就是这种稍微绚丽厚重一点的风格吧。\n\n### 新版截图\n\n*编辑页*：\n\nPC端：\n\n![1563956363707](http://localhost:9000/img/1563956363707.png)\n\n\n移动端：\n\n![1563956363731](http://localhost:9000/img/1563956363731.png)\n\n\n*列表页*：\n\nPC端:\n\n![1563956363737](http://localhost:9000/img/1563956363737.png)\n\n![1563956363742](http://localhost:9000/img/1563956363742.png)\n\n移动端：\n\n![1563956363771](http://localhost:9000/img/1563956363771.png)\n\n![1563956363776](http://localhost:9000/img/1563956363776.png)\n\n\n*详情页*：\n\nPC端：\n\n![1563956363747](http://localhost:9000/img/1563956363747.png)\n\n![1563956363753](http://localhost:9000/img/1563956363753.png)\n\n![1563956363800](http://localhost:9000/img/1563956363800.png)\n\n\n移动端：\n\n![1563956363758](http://localhost:9000/img/1563956363758.png)\n\n![1563956363787](http://localhost:9000/img/1563956363787.png)\n\n![1563956363764](http://localhost:9000/img/1563956363764.png)\n\n\n### 设计理念\n\n2018年发生了许多事情，换了一个城市，换了一个公司。 \n\n年中的时候从广州搬到了深圳，开发的项目也从电商换成了社交。\n\n认识了一些新朋友，也与一些人不再联系。\n\n今年希望好好充实自己，去掉一些多余的装饰，工作与生活只需要简单、实用与舒适。\n\n因此，这次改版，我希望界面能更清爽、交互体验更好。\n\n\n### 技术架构\n\nvue + koa2\n\n组织结构，学习了laravel框架的文件组织结构，使控制器和路由API分离开来：\n\n![1563956363795](http://localhost:9000/img/1563956363795.png)\n\n\n## 遇到的坑\n\n### 原生实现本地JSON文件的读写\n\n不知是不是换成koa框架开发的原因，lowdb之前在2.0的时候还用得好好的，到3.0开发的时候，删除api就一直无效，使用 `read()`刷新缓存也还是不行，无解了。\n\n因此还是自己实现了文件的读写，好在数据格式比较简单，实现起来也容易。\n\n以下是代码：\n\n```\nconst fs = require('fs');\n\n// 读取文件\nfunction getFile(path = 'list') {\n    let filePath = 'data/' + path + '.json'\n    return JSON.parse(fs.readFileSync(filePath))\n}\n\n// 写入文件\nfunction postFile(path = 'list', req) {\n    let filePath = 'data/' + path + '.json';\n    fs.writeFileSync(filePath, JSON.stringify(req));\n}\n\n// 删除文件\nfunction deleteFile(id) {\n    let filePath = 'data/' + id + '.json';\n    fs.unlinkSync(filePath);\n}\n```\n\n\n### 第三方图床与本地存图的选择\n\n七牛的外链图全挂了，进后台都下载不了, 哭死……\n\n用了阿里云OSS有怕不小心流量过大消费不起，战战兢兢……\n\n最后还是决定自己实现本地存图功能，也许以后有闲钱可以买个服务器跑Node了呢🤣\n\n```\n// 上传图片\n\nconst upload = async (ctx, next) => {\n    const req = ctx.request.body;\n    ctx.status = 200;\n    let base64Data = req.base64.replace(/^data:image\\/\\w+;base64,/, \"\");\n    let dataBuffer = new Buffer(base64Data, 'base64');\n    let fileType = req.base64.match(/^data:image\\/\\w+;/)[0];\n    fileType = fileType.split('/')[1].replace(';', '');\n    let filleName = Date.now();\n    let filePath = 'public/uploads/' + filleName + '.' + fileType\n    fs.writeFile(filePath, dataBuffer, function (err) {\n        console.log(err);\n    });\n    ctx.body = {\n        message: \"上传成功\",\n        id: filleName + '.' + fileType\n    }\n}\n```","imgs":[],"img":"","video":"","version":"3.0.0","todo":[],"lasttime":1563956695373,"pid":"1563854559250","id":1563956033822},{"type":2,"title":"前言","content":"距离上次改版时隔半年，没想到这次改版会来得这么快。\n\n从设计到实现后端&后台总共花了6天时间（确切的说是4天，因为周末两天追剧去了😂）。\n\n这次做了一个独立的后台，但没加账号密码那一套，毕竟只是在本地运行。\n\n好了，说说本次改版的原因。\n\n以前从第1版到第3版我都是使用发布文章的模式，一篇文章一个内容，结论是没有更新的动力……🤣\n\n如果说把这个网站当做是一个博客系统，用来写学习笔记或者心情日记的话，实际上一段时间的试用之后，我发现我更愿意用有道云笔记和微博来代替。\n\n我也不想让这里变成一个代码收集器，混合了各种乱七八糟的从别人网站上粘贴来得内容。这样版权容易出问题，并且感觉有点Low。\n\n于是在6天前的灵光一现后，我干劲十足的开工啦：\n\n这是一个用于展现我作品的网站。作品包括并不限于网页程序、手机程序、桌面程序、UI设计、视频剪辑等等内容。把这些作品，当做工作中的项目来做，在这里记录需求、设计、实现……\n\n这些作品可以是我业余的练习产物，也可以是在实际工作中负责的项目。\n\n程序代码可以选择开源，也可以选择只是纯记录思考的过程。\n\n写到这里的时候，后端程序和后台系统都已经完成了。还有前台部分待开发。\n\n本次后端程序依然使用了 Node.js + Koa2，数据库也仍就是json文件。\n\nemmm……后端方面感觉没啥进步啊。\n\n![咸鱼_表情](http://localhost:9000/img/1563866250527.jpeg)\n\n后台方面，用了Vue全家桶 + Axios + Element UI，也是老三样了，以前工作中的项目都是用这个的，感觉没有什么新东西。\n\n![笑哭_表情](http://localhost:9000/img/1563866250495.jpeg)\n\n前台方面，打算用Vue全家桶 + Axios。前台就不用UI库了，自己捉摸着写一个吧，不过这个就又是另外一个项目了。\n\n本次改版开发体验还是非常流畅的，基本没有碰到什么难点。等到年底Vue3.0出来了以后，或许会试着用Typescript重构一遍。\n\n以上, 希望这个版本能用久一点~\n\n🍻","imgs":[],"img":"","video":"","version":"4.0.0","todo":[],"lasttime":1564135503658,"pid":"1563854559250","id":1563956966900},{"type":1,"title":"需求清单","content":"","imgs":[],"img":"","video":"","version":"4.0.1","todo":[{"checked":true,"id":1563959770206,"content":"分离独立后台"},{"checked":false,"id":1563959785694,"content":"后台-增加数据统计模块（UI已完成，数据未对接）"},{"checked":true,"id":1563959819678,"content":"后台-增加项目管理模块"},{"checked":true,"id":1563959863774,"content":"后台-增加标签管理模块"},{"checked":true,"id":1563959881638,"content":"后台-增加图片库模块"},{"checked":false,"id":1563959918478,"content":"前台-增加首页模块-PC端"},{"checked":false,"id":1563959920358,"content":"前台-增加项目模块-PC端"},{"checked":false,"id":1563959921486,"content":"前台-增加关于我模块-PC端"}],"lasttime":1564135507298,"pid":"1563854559250","id":1563959932318},{"type":3,"title":"PC端UI稿","content":"","imgs":[{"id":1563960708372,"path":"1563960708372.png"},{"id":1563960708381,"path":"1563960708381.png"},{"id":1563960708393,"path":"1563960708393.png"},{"id":1563960708413,"path":"1563960708413.png"},{"id":1563960722516,"path":"1563960722516.png"}],"img":"","video":"","version":"4.0.2","todo":[],"lasttime":1564135510882,"pid":"1563854559250","id":1563960729604},{"type":3,"title":"后台实机UI","content":"","imgs":[{"id":1563964302544,"path":"1563964302544.png"},{"id":1563964302579,"path":"1563964302579.png"},{"id":1563964302588,"path":"1563964302588.png"},{"id":1563964302596,"path":"1563964302596.png"},{"id":1563964379904,"path":"1563964379904.png"}],"img":"","video":"","version":"4.0.3","todo":[],"lasttime":1564135514578,"pid":"1563854559250","id":1563964312652},{"type":3,"title":"前台实机UI","content":"","imgs":[{"id":1564383720697,"path":"1564383720697.png"},{"id":1564383723592,"path":"1564383723592.png"},{"id":1564383726263,"path":"1564383726263.png"},{"id":1564384168515,"path":"1564384168515.png"}],"img":"","video":"","version":"4.0.4","todo":[],"lasttime":1564384169808,"pid":"1563854559250","id":1564383753210}]