{"id":"1515849780154","title":"个人静态博客开发小结v1.0\n","summary":"","tags":["Vue","Node","Express","LowDB","Axios","Markdown","博客","总结","改版"],"content":"# 个人静态博客开发小结v1.0\n\n之前用过**hexo**,**wordpress**之类的博客，可以开箱即用，写博客也很方便。\n\nwordpress功能很全，但是需要购买服务器，而且用久了会有点卡，对于我来说代码量有些臃肿。hexo是静态博客，可以生产静态html，不需要服务器直接push到github，改了几个主题之后，还是觉得有些局限，而且直接用编辑器写mk文件还是觉得不够方便。\n\n这两个博客程序都不太符合自己的需求，所以一直想着从设计到前后端，自己动手实现一个静态博客程序。\n\n最近刚好有时间，就自己琢磨着写了一个，还不是很完善，但是目前来说足够我用了。\n\n需求是：\n\n1. 可以直接打开浏览器写文章，而不需要打开编辑器；\n2. 能够用markdown语法；\n3. 以标签为导向而不是时间，能为每篇文章输入不同的标签，模糊写文章的具体时间，以缓解更新的压力，每篇文章首次提交之后可以反复编辑，只保留最后一次更新的日期作为参考；\n4. 数据和界面分离，能够很方便修改主题；\n5. 编辑文章的界面要有一个搜索功能，可以根据标签搜索到匹配的文章列表。\n6. 简单，易上手，开箱即用。\n\n----\n\n## 1.0 版本界面截图：\n\n后台编辑界面：\n\n![](http://oh8nyy0e4.bkt.clouddn.com/18-1-17/65210447.jpg)\n\n前台博客界面：\n\n![](http://oh8nyy0e4.bkt.clouddn.com/18-1-17/64766092.jpg)\n\n后台界面在本地运行，所以无法提供预览。\n\n前台博客界面访问：\nhttp://blog.huanggaofang.com 即可查看。\n\n## 关于后台开发\n\n#### 使用技术 \n\nNode.js、Express、LowDB、CORS\n\n#### 遇到的坑\n\n1. 跨域：\n\n  在前端访问后端ajax接口时会报错：\n\n  ```javascript\n  XMLHttpRequest cannot load http://192.168.1.159:9000/getList. \nOrigin http://192.168.1.159 is not allowed by Access-Control-Allow-Origin.\n  ```\n\n  尝试了以下方法，但并不成功：\n\n  ```javascript\n  app.all('*', function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n    res.header(\"Access-Control-Allow-Methods\",\"PUT,POST,GET,DELETE,OPTIONS\");\n    res.header(\"X-Powered-By\",' 3.2.1')\n    res.header(\"Content-Type\", \"application/json;charset=utf-8\");\n    next();\n  });\n  ```\n\n  解决办法，引入[CORS ](https://github.com/expressjs/cors)\n\n  ```javascript\n  /*app.js*/\n  let cors = require('cors') //设置允许跨域访问\n  //查询列表\n  app.post('/getList', cors(), function (req, res) {\n    let alldata = ''\n    req.on('data', function (chunk) {\n      alldata += chunk\n    });\n    req.on('end', function () {\n      let dataString = alldata.toString()\n      let dataObj = querystring.parse(dataString) //前端请求的参数\n      res.json({\n        status: '1',\n        msg: 'Success!'\n      });\n    });\n  });\n```\n\n  这样就可以跨域访问接口了。\n\n2. 数据库\n\n  因为前端调数据时我希望能使用JSON格式，所以一开始方向就是Node.js读写数据。\n\n  刚开始用以下写法：\n\n  ```javascript\n  //创建JSON文件\n  var fs=require('fs');\n  fs.writeFileSync('./output.json',JSON.stringify({a:1,b:2}));\n  ```\n\n  并且最初的想法是一个list.json文件写入所有的文章列表，然后具体文章放到子文件夹里，按写入日期分割成每个独立的小文件，以减少体积。\n\n  后来发现完全没有必要做，反而违背了我希望能简洁使用的原则。\n\n  于是使用了 [LowDB](https://github.com/typicode/lowdb)\n\n  配置：\n\n  ```javascript\n  /*app.js*/\n  const low = require('lowdb')\n  const FileSync = require('lowdb/adapters/FileSync')\n  const adapter = new FileSync('./data/list.json')\n  const db = low(adapter)\n  db.defaults({\n    list: []\n   }).write()\n  let list = db.get('list')\n  ```\n\n  其中**db.defaults()**这一步很重要，如果不写，读取数据就不会成功\n\n  生成的JSON文件是这样的\n\n  ```javascript\n  /*list.json*/\n  {\n    \"list\": [\n      {\n        \"id\": \"1515239514230\",\n        \"title\": \"Axios + Vue 的简单配置\",\n        \"tags\": \"Axios,Vue,HTTP库\",\n        \"lasttime\": \"1516196835501\",\n        \"content\": \"111\"\n      },\n      {\n        \"id\": \"1515849780154\",\n        \"title\": \"个人静态博客开发小结\",\n        \"tags\": \"Vue,Node,Express,LowDB,Axios,Markdown,博客,总结\",\n        \"lasttime\": \"1516283226745\",\n        \"content\": \"222\"\n      }\n    ]\n  }\n  ```\n\n## 关于前台开发\n\n#### 遇到的坑\n\n在编辑界面传tags时， 后端接收到的格式会发生变化，\n\n```javascript\n//发送的格式\nlet data = {\ntags: [1, 2, 3]\n}\n//收到的格式\nlet data = {\ntags[0]: 1,\ntags[1]: 2,\ntags[3]: 3,\n}\n```\n#### 解决方法\n\n把tags转成字符串再发送 `Array.join(\",\")`\n\n#### 猜测\n\n由于后端收到代码时进行了转码导致`toString()`，待证实，等下次改版再优化了，目前暂时这样。\n\n## 使用Ctrl+S保存\n\n```javascript\n  mounted() {\n    let self = this;\n    window.addEventListener(\"keydown\", function(e) {\n        //可以判断是不是mac，如果是mac,ctrl变为花键\n        //event.preventDefault() 方法阻止元素发生默认的行为。\n        if (e.keyCode == 83 && (navigator.platform.match(\"Mac\") ? e.metaKey : e.ctrlKey)) {\n            e.preventDefault();\n            // Process event...\n            self.saveItem();\n        }\n    }, false);\n  },\n```\n\n## 下个版本待优化事项：\n\n1. 目前需要开启3个命令运行，下个版本需要优化成开启1个命令即可运行\n\n2. list.json文件和前端界面实现分离，list.json修改，而不需要重新编译blog (已完成)\n\n3. edit 和 blog 抽取部分重复css，实现复用。","lasttime":1547540190113}